// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace C4Interflow.Specs.DrawDiagrams
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DrawingDiagramsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Examples.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DrawDiagrams", "Drawing Diagrams", "\tTest out different combinations of drawing diagrams", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Drawing Diagrams")))
            {
                global::C4Interflow.Specs.DrawDiagrams.DrawingDiagramsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void VerifyExamples(string description, string example, string path, string readerStrategy, string interfaces, string businessProcesses, string levelOfDetails, string outputPath, string approvedOutPath, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Example", example);
            argumentsOfScenario.Add("Path", path);
            argumentsOfScenario.Add("ReaderStrategy", readerStrategy);
            argumentsOfScenario.Add("Interfaces", interfaces);
            argumentsOfScenario.Add("BusinessProcesses", businessProcesses);
            argumentsOfScenario.Add("LevelOfDetails", levelOfDetails);
            argumentsOfScenario.Add("OutputPath", outputPath);
            argumentsOfScenario.Add("ApprovedOutPath", approvedOutPath);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Examples", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("the \'draw-diagrams\' command", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
   testRunner.And(string.Format("the \'{0}\' example", example), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
   testRunner.And(string.Format("the path \'{0}\'", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
   testRunner.And(string.Format("the reader strategy is \'{0}\'", readerStrategy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
   testRunner.And(string.Format("the interfaces are \'{0}\'", interfaces), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
   testRunner.And(string.Format("the business processes are \'{0}\'", businessProcesses), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
   testRunner.And(string.Format("the level of details is \'{0}\'", levelOfDetails), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
   testRunner.And(string.Format("send the output to \'{0}\'", outputPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.When("invoking the commandline for those arguments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then(string.Format("all files under \'{0}\' should match example path \'{1}\'", outputPath, approvedOutPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify Examples: Banking System via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Drawing Diagrams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Banking System via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Banking System via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Example", "Internet Banking System")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Path", "CSV\\Architecture\\Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ReaderStrategy", "Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Interfaces", "BigBankPlc.SoftwareSystems.*.Containers.*.Interfaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BusinessProcesses", "BigBankPlc.BusinessProcesses.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LevelOfDetails", "context container")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OutputPath", "_bankingYaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ApprovedOutPath", "Internet Banking System\\CSV\\Diagrams")]
        public void VerifyExamples_BankingSystemViaYaml()
        {
#line 4
this.VerifyExamples("Banking System via Yaml", "Internet Banking System", "CSV\\Architecture\\Yaml", "Yaml", "BigBankPlc.SoftwareSystems.*.Containers.*.Interfaces", "BigBankPlc.BusinessProcesses.*", "context container", "_bankingYaml", "Internet Banking System\\CSV\\Diagrams", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify Examples: Banking System via Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Drawing Diagrams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Banking System via Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "Banking System via Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Example", "Internet Banking System")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Path", "CSV\\Architecture\\Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ReaderStrategy", "Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Interfaces", "BigBankPlc.SoftwareSystems.*.Containers.*.Interfaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BusinessProcesses", "BigBankPlc.BusinessProcesses.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LevelOfDetails", "context container")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OutputPath", "_bankingJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ApprovedOutPath", "Internet Banking System\\CSV\\Diagrams")]
        public void VerifyExamples_BankingSystemViaJson()
        {
#line 4
this.VerifyExamples("Banking System via Json", "Internet Banking System", "CSV\\Architecture\\Json", "Json", "BigBankPlc.SoftwareSystems.*.Containers.*.Interfaces", "BigBankPlc.BusinessProcesses.*", "context container", "_bankingJson", "Internet Banking System\\CSV\\Diagrams", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify Examples: ECommerce via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Drawing Diagrams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ECommerce via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ECommerce via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Example", "E-Commerce Platform")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Path", "Yaml\\Architecture")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ReaderStrategy", "Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Interfaces", "ECommercePlatform.*.*.SoftwareSystems.*.Interfaces.* ECommercePlatform.*.*.Softwa" +
            "reSystems.*.Containers.*.Interfaces.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BusinessProcesses", "ECommercePlatform.BusinessProcesses.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LevelOfDetails", "context container")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OutputPath", "_ecommerceYaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ApprovedOutPath", "E-Commerce Platform\\Yaml\\Diagrams")]
        public void VerifyExamples_ECommerceViaYaml()
        {
#line 4
this.VerifyExamples("ECommerce via Yaml", "E-Commerce Platform", "Yaml\\Architecture", "Yaml", "ECommercePlatform.*.*.SoftwareSystems.*.Interfaces.* ECommercePlatform.*.*.Softwa" +
                    "reSystems.*.Containers.*.Interfaces.*", "ECommercePlatform.BusinessProcesses.*", "context container", "_ecommerceYaml", "E-Commerce Platform\\Yaml\\Diagrams", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify Examples: TraderX via Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Drawing Diagrams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TraderX via Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TraderX via Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Example", "TraderX")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Path", "CSV\\Architecture\\Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ReaderStrategy", "Json")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Interfaces", "TraderXExample.SoftwareSystems.*.Containers.*.Interfaces.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BusinessProcesses", "TraderXExample.BusinessProcesses.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LevelOfDetails", "context container")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OutputPath", "_traderXJson")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ApprovedOutPath", "TraderX\\CSV\\Diagrams")]
        public void VerifyExamples_TraderXViaJson()
        {
#line 4
this.VerifyExamples("TraderX via Json", "TraderX", "CSV\\Architecture\\Json", "Json", "TraderXExample.SoftwareSystems.*.Containers.*.Interfaces.*", "TraderXExample.BusinessProcesses.*", "context container", "_traderXJson", "TraderX\\CSV\\Diagrams", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify Examples: TraderX via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Drawing Diagrams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TraderX via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "TraderX via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Example", "TraderX")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Path", "CSV\\Architecture\\Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ReaderStrategy", "Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Interfaces", "TraderXExample.SoftwareSystems.*.Containers.*.Interfaces.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BusinessProcesses", "TraderXExample.BusinessProcesses.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LevelOfDetails", "context container")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OutputPath", "_traderXYaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ApprovedOutPath", "TraderX\\CSV\\Diagrams")]
        public void VerifyExamples_TraderXViaYaml()
        {
#line 4
this.VerifyExamples("TraderX via Yaml", "TraderX", "CSV\\Architecture\\Yaml", "Yaml", "TraderXExample.SoftwareSystems.*.Containers.*.Interfaces.*", "TraderXExample.BusinessProcesses.*", "context container", "_traderXYaml", "TraderX\\CSV\\Diagrams", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify Examples: ToDoApp via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Drawing Diagrams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ToDoApp via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Description", "ToDoApp via Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Example", "ToDoApp")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Path", "Yaml\\Architecture")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ReaderStrategy", "Yaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Interfaces", "ToDoAppExample.SoftwareSystems.*.Containers.*.Interfaces.* ToDoAppExample.Softwar" +
            "eSystems.*.Interfaces.*")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BusinessProcesses", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LevelOfDetails", "container")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OutputPath", "_todoYaml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ApprovedOutPath", "ToDoApp\\Yaml\\Diagrams")]
        public void VerifyExamples_ToDoAppViaYaml()
        {
#line 4
this.VerifyExamples("ToDoApp via Yaml", "ToDoApp", "Yaml\\Architecture", "Yaml", "ToDoAppExample.SoftwareSystems.*.Containers.*.Interfaces.* ToDoAppExample.Softwar" +
                    "eSystems.*.Interfaces.*", "", "container", "_todoYaml", "ToDoApp\\Yaml\\Diagrams", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
