using C4InterFlow.Structures;
using System.Text;
using YamlDotNet.Core;

namespace C4InterFlow.Automation.Writers
{
    public class CSharpCodeWriter : ICodeWriter
    {
        internal const string ROOT_ARCHITECTURE_NAMESPACE = nameof(C4InterFlow);
        public static string? GetLabel(string? text)
        {
            return AnyCodeWriter.GetLabel(text);
        }
        public string GetContainerCode(string architectureNamespace, string softwareSystemName, string name, string label, string? type = null, string? description = null, string? technology = null, string? boundary = null)
        {
            var result = new StringBuilder(GetSoftwareSystemsCodeHeader(architectureNamespace));
            var containerName = AnyCodeWriter.GetName(name);

            result.Append($@"
    public partial class {AnyCodeWriter.GetName(softwareSystemName)}
    {{
        public partial class Containers
        {{
            public partial class {containerName} : IContainerInstance
            {{
                public Container Instance => new Container(
                    GetType(), {AnyCodeWriter.EnsureDoubleQuotes(label)})
                {{
                    ContainerType = ContainerType.{(!string.IsNullOrEmpty(type) ? type : "None")},
                    Description = {(!string.IsNullOrEmpty(description) ? AnyCodeWriter.EnsureDoubleQuotes(description) : "\"\"")},
                    Technology = {(!string.IsNullOrEmpty(technology) ? AnyCodeWriter.EnsureDoubleQuotes(technology) : "\"\"")},
                    Boundary = Boundary.{(!string.IsNullOrEmpty(boundary) ? boundary : "Internal")}
                }};

                public partial class Components
                {{ }}

                public partial class Interfaces
                {{ }}

                public partial class Entities
                {{ }}
            }}
        }}
    }}
");
            result.AppendLine("}");

            return result.ToString();
        }

        private string GetSoftwareSystemsCodeHeader(string architectureNamespace)
        {
            var result = new StringBuilder();

            result.AppendLine(@"// <auto-generated/>");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE};");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE}.Structures;");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE}.Structures.Interfaces;");
            result.AppendLine();
            result.AppendLine($"namespace {architectureNamespace}.SoftwareSystems");
            result.AppendLine("{");

            return result.ToString();
        }

        private string GetActorsCodeHeader(string architectureNamespace)
        {
            var result = new StringBuilder();

            result.AppendLine(@"// <auto-generated/>");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE};");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE}.Structures;");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE}.Structures.Interfaces;");
            result.AppendLine();
            result.AppendLine($"namespace {architectureNamespace}.Actors");
            result.AppendLine("{");

            return result.ToString();
        }

        private string GetBusinessProcessesCodeHeader(string architectureNamespace)
        {
            var result = new StringBuilder();

            result.AppendLine(@"// <auto-generated/>");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE};");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE}.Structures;");
            result.AppendLine($"using {ROOT_ARCHITECTURE_NAMESPACE}.Structures.Interfaces;");
            result.AppendLine();
            result.AppendLine($"namespace {architectureNamespace}.BusinessProcesses");
            result.AppendLine("{");

            return result.ToString();
        }

        public string GetSoftwareSystemCode(string architectureNamespace, string name, string label, string? description = null, string? boundary = null)
        {
            var result = new StringBuilder(GetSoftwareSystemsCodeHeader(architectureNamespace));
            var softwareSystemName = AnyCodeWriter.GetName(name);

            result.Append($@"
    public partial class {softwareSystemName} : ISoftwareSystemInstance
    {{
        public SoftwareSystem Instance => new SoftwareSystem(
            GetType(), {AnyCodeWriter.EnsureDoubleQuotes(label)})
        {{
            Description = {(!string.IsNullOrEmpty(description) ? AnyCodeWriter.EnsureDoubleQuotes(description) : "\"\"")},
            Boundary = Boundary.{(!string.IsNullOrEmpty(boundary) ? boundary : "Internal")}
        }};

        public partial class Containers
        {{ }}

        public partial class Interfaces
        {{ }}
    }}
");

            result.AppendLine("}");

            return result.ToString();
        }

        public string GetActorCode(string architectureNamespace, string type, string name, string label, string? description = null)
        {
            var result = new StringBuilder(GetActorsCodeHeader(architectureNamespace));
            var actorName = AnyCodeWriter.GetName(name);

            result.Append($@"
    public class {actorName} : I{type}Instance
    {{
        public {type} Instance => new {type}(
            GetType(), {AnyCodeWriter.EnsureDoubleQuotes(label)})
        {{
            Description = {(description != null ? description : "\"\"")},
        }};
    }}
");

            result.AppendLine("}");

            return result.ToString();
        }

        public string GetComponentCode(string architectureNamespace, string softwareSystemName, string containerName, string name, string label, string componentType = "None", string? description = null, string? technology = null)
        {
            var result = new StringBuilder(GetSoftwareSystemsCodeHeader(architectureNamespace));
            var componentName = AnyCodeWriter.GetName(name);

            result.Append($@"
    public partial class {AnyCodeWriter.GetName(softwareSystemName)}
    {{
        public partial class Containers
        {{
            public partial class {AnyCodeWriter.GetName(containerName)}
            {{
                public partial class Components
                {{
                    public partial class {componentName} : IComponentInstance
                    {{
                        public Component Instance => new Component(
                            GetType(), {AnyCodeWriter.EnsureDoubleQuotes(label)})
                        {{
                            ComponentType = ComponentType.{componentType},
                            Description = {(!string.IsNullOrEmpty(description) ? AnyCodeWriter.EnsureDoubleQuotes(description) : "\"\"")},
                            Technology = {(!string.IsNullOrEmpty(technology) ? AnyCodeWriter.EnsureDoubleQuotes(technology) : "\"\"")}
                        }};

                        public partial class Interfaces
                        {{ }}
                    }}
                }}
            }}
        }}
    }}
");

            result.AppendLine("}");

            return result.ToString();
        }

        public string GetEntityCode(string architectureNamespace, string softwareSystemName, string containerName, string name, string label, string? type = null, string? description = null, string[]? composedOfMany = null, string[]? composedOfOne = null, string? extends = null)
        {
            var result = new StringBuilder(GetSoftwareSystemsCodeHeader(architectureNamespace));
            var entityName = AnyCodeWriter.GetName(name);

            result.Append($@"
    public partial class {AnyCodeWriter.GetName(softwareSystemName)}
    {{
        public partial class Containers
        {{
            public partial class {AnyCodeWriter.GetName(containerName)}
            {{
                public partial class Entities
                {{
                    public partial class {entityName} : IEntityInstance
                    {{
                        public Entity Instance => new Entity(
                            GetType(), {AnyCodeWriter.EnsureDoubleQuotes(label)}, {(type != null ? type : "EntityType.None")})
                        {{
                            Description = {(!string.IsNullOrEmpty(description) ? AnyCodeWriter.EnsureDoubleQuotes(description) : "\"\"")},
                            ComposedOfMany = new string[] {{{(composedOfMany != null ? string.Join(", ", composedOfMany.Select(x => AnyCodeWriter.EnsureDoubleQuotes(x))) : " ")}}},
                            ComposedOfOne = new string[] {{{(composedOfOne != null ? string.Join(", ", composedOfOne.Select(x => AnyCodeWriter.EnsureDoubleQuotes(x))) : " ")}}},
                            Extends = {(!string.IsNullOrEmpty(extends) ? AnyCodeWriter.EnsureDoubleQuotes(extends) : "\"\"")},
                        }};
                    }}
                }}
            }}
        }}
    }}
 ");
            result.AppendLine("}");

            return result.ToString();
        }

        public string GetComponentInterfaceCode(string architectureNamespace, string softwareSystemName, string containerName, string componentName, string name, string label, string? description = null, string? protocol = null, string? path = null, bool? isPrivate = null, string? uses = null, string? input = null, string? inputTemplate = null, string? output = null, string? outputTemplate = null)
        {
            var result = new StringBuilder(GetSoftwareSystemsCodeHeader(architectureNamespace));
            var componentInterfaceName = AnyCodeWriter.GetName(name);

            result.Append($@"
    public partial class {AnyCodeWriter.GetName(softwareSystemName)}
    {{
        public partial class Containers
        {{
            public partial class {containerName}
            {{
                public partial class Components
                {{
                    public partial class {componentName}
                    {{
                        public partial class Interfaces
                        {{
                            public partial class {componentInterfaceName} : IInterfaceInstance
                            {{
                                public Interface Instance => new Interface(
                                    GetType(), {AnyCodeWriter.EnsureDoubleQuotes(label)})
                                {{
                                    Description = {(description != null ? AnyCodeWriter.EnsureDoubleQuotes(description) : "\"\"")},
                                    Path = {(path != null ? AnyCodeWriter.EnsureDoubleQuotes(path) : "\"\"")},
                                    IsPrivate = {(isPrivate != null ? isPrivate.ToString().ToLower() : "false")},
                                    Protocol =  {(protocol != null ? AnyCodeWriter.EnsureDoubleQuotes(protocol) : "\"\"")},
                                    Flow = new Flow(Interface.GetAlias(GetType())),
                                    Input = {(input != null ? input : "\"\"")},
                                    InputTemplate = {(inputTemplate != null ? inputTemplate : "\"\"")},
                                    Output = {(output != null ? output : "\"\"")},
                                    OutputTemplate = {(outputTemplate != null ? outputTemplate : "\"\"")}
                                }};
                            }}
                        }}
                    }}
                }}
            }}
        }}
    }}
");
            result.AppendLine("}");

            return result.ToString();
        }

        public string GetContainerInterfaceCode(string architectureNamespace, string softwareSystemName, string containerName, string name, string label, string? description = null, string? protocol = null, string? uses = null, string? input = null, string? inputTemplate = null, string? output = null, string? outputTemplate = null)
        {
            var result = new StringBuilder(GetSoftwareSystemsCodeHeader(architectureNamespace));
            var containerInterfaceName = AnyCodeWriter.GetName(name);

            result.Append($@"
    public partial class {AnyCodeWriter.GetName(softwareSystemName)}
    {{
        public partial class Containers
        {{
            public partial class {containerName}
            {{
                public partial class Interfaces
                {{
                    public partial class {containerInterfaceName} : IInterfaceInstance
                    {{
                        public Interface Instance => new Interface(
                            GetType(), {AnyCodeWriter.EnsureDoubleQuotes(label)})
                        {{
                            Description = {(description != null ? AnyCodeWriter.EnsureDoubleQuotes(description) : "\"\"")},
                            Flow = new Flow(Interface.GetAlias(GetType())),
                            Protocol = {(protocol != null ? AnyCodeWriter.EnsureDoubleQuotes(protocol) : "\"\"")},
                            Input = {(input != null ? input : "\"\"")},
                            InputTemplate = {(inputTemplate != null ? inputTemplate : "\"\"")},
                            Output = {(output != null ? output : "\"\"")},
                            OutputTemplate = {(outputTemplate != null ? outputTemplate : "\"\"")}
                        }};
                    }}
                }}
            }}
        }}
    }}
");
            result.AppendLine("}");

            return result.ToString();
        }

        public string GetSoftwareSystemInterfaceCode(string architectureNamespace, string softwareSystemName, string name, string label, string? description = null, string? protocol = null, string? uses = null, string? input = null, string? inputTemplate = null, string? output = null, string? outputTemplate = null)
        {
            var result = new StringBuilder(GetSoftwareSystemsCodeHeader(architectureNamespace));
            var softwareSystemInterfaceName = AnyCodeWriter.GetName(name);

            result.Append($@"
    public partial class {softwareSystemName}
    {{
        public partial class Interfaces
        {{
            public partial class {softwareSystemInterfaceName} : IInterfaceInstance
            {{
                public Interface Instance => new Interface(
                    GetType(), {AnyCodeWriter.EnsureDoubleQuotes(label)})
                {{
                    Description = {(description != null ? AnyCodeWriter.EnsureDoubleQuotes(description) : "\"\"")},
                    Flow = new Flow(Interface.GetAlias(GetType())),
                    Protocol = {(protocol != null ? AnyCodeWriter.EnsureDoubleQuotes(protocol) : "\"\"")},
                    Input = {(input != null ? input : "\"\"")},
                    InputTemplate = {(inputTemplate != null ? inputTemplate : "\"\"")},
                    Output = {(output != null ? output : "\"\"")},
                    OutputTemplate = {(outputTemplate != null ? outputTemplate : "\"\"")}
                }};
            }}
        }}
    }}
");
            result.AppendLine("}");

            return result.ToString();
        }

        public string GetFlowCode(Flow flow)
        {
            var result = new StringBuilder();
            var expression = flow.Expression ?? string.Empty;

            switch (flow.Type) {
                case Flow.FlowType.If:
                    {
                        result.Append(GetIfFlowCode(expression));
                        break;
                    }
                case Flow.FlowType.ElseIf:
                    {
                        result.Append(GetElseIfFlowCode(expression));
                        break;
                    }
                case Flow.FlowType.Else:
                    {
                        result.Append(GetElseFlowCode());
                        break;
                    }
                case Flow.FlowType.Loop:
                    {
                        result.Append(GetLoopFlowCode(expression));
                        break;
                    }
                case Flow.FlowType.Try:
                    {
                        result.Append(GetTryFlowCode());
                        break;
                    }
                case Flow.FlowType.Catch:
                    {
                        result.Append(GetCatchFlowCode(expression));
                        break;
                    }
                case Flow.FlowType.Finally:
                    {
                        result.Append(GetFinallyFlowCode());
                        break;
                    }
                case Flow.FlowType.Return:
                    {
                        result.Append(GetReturnFlowCode(expression));
                        break;
                    }
                case Flow.FlowType.ThrowException:
                    {
                        result.Append(GetThrowExceptionFlowCode(expression));
                        break;
                    }
                case Flow.FlowType.Use:
                    {
                        result.Append(GetUseFlowCode(expression));
                        break;
                    }
                default:
                    break;
            }

            if (flow.Flows != null)
            {
                foreach (var innerFlow in flow.Flows)
                {
                    var code = GetFlowCode(innerFlow);
                    if (!string.IsNullOrEmpty(code))
                    {
                        result.AppendLine($"\t{code}");
                    }
                }
            }

            return result.ToString();
        }

        public string GetLoopFlowCode(string condition)
        {
            return $"\t.Loop(@\"{GetFormattedParams(condition)}\")";
        }

        public string GetEndLoopFlowCode()
        {
            return "\t.EndLoop()";
        }

        public string GetIfFlowCode(string condition)
        {
            return $"\t.If(@\"{GetFormattedParams(condition)}\")";
        }

        public string GetEndIfFlowCode()
        {
            return "\t.EndIf()";
        }

        public string GetElseIfFlowCode(string condition)
        {
            return $"\t.ElseIf(@\"{GetFormattedParams(condition)}\")";
        }

        public string GetEndElseIfFlowCode()
        {
            return string.Empty;
        }

        public string GetElseFlowCode()
        {
            return "\t.Else()";
        }

        public string GetEndElseFlowCode()
        {
            return string.Empty;
        }

        public string GetReturnFlowCode(string? expression = null)
        {
            return $"\t.Return(@\"{GetFormattedParams(expression ?? string.Empty)}\")";
        }

        public string GetTryFlowCode()
        {
            return $"\t.Try()";
        }

        public string GetEndTryFlowCode()
        {
            return "\t.EndTry()";
        }

        public string GetCatchFlowCode(string? exception = null)
        {
            return $"\t\t.Catch(@\"{GetFormattedParams(exception ?? string.Empty)}\")";
        }

        public string GetEndCatchFlowCode()
        {
            return "\t\t.EndCatch()";
        }

        public string GetFinallyFlowCode()
        {
            return $"\t\t.Finally()";
        }

        public string GetEndFinallyFlowCode()
        {
            return "\t\t.EndFinally()";
        }

        public string GetThrowExceptionFlowCode(string? exception = null)
        {
            return $"\t.ThrowException(@\"{GetFormattedParams(exception ?? string.Empty)}\")";
        }

        private string GetFormattedParams(string @params)
        {
            return @params.Replace(Environment.NewLine, "\\n").Replace("\"", "\"\"");
        }

        public string GetUseFlowCode(string alias)
        {
            return $"\t.Use<{alias}>()";
        }

        public string GetBusinessProcessCode(string architectureNamespace, string name, string label, string businessActivitiesCode, string? description = null)
        {
            var result = new StringBuilder(GetBusinessProcessesCodeHeader(architectureNamespace));

            result.Append($@"
    public class {AnyCodeWriter.GetName(name)} : IBusinessProcessInstance
    {{
        public static BusinessProcess  Instance => new BusinessProcess(new Activity[]
        {{
            {businessActivitiesCode}
        }}, {(label != null ? AnyCodeWriter.EnsureDoubleQuotes(label) : "\"\"")});
    }}
");
            result.AppendLine("}");

            return result.ToString();
        }

        public string GetActivityCode(string label, string actor, Flow[] flows, string? description = null)
        {
            var result = new StringBuilder($@"
            new Activity(new Flow()");
            
            foreach (var flow in flows)
            {
                var code = GetFlowCode(flow);
                if(!string.IsNullOrEmpty(code))
                {
                    result.AppendLine();
                    result.Append($"\t\t\t{code}");
                }
            }
            result.AppendLine($@",
                ""{actor}"",
                {(!string.IsNullOrEmpty(label) ? AnyCodeWriter.EnsureDoubleQuotes(label) : "\"\"")}),");
            return result.ToString();
        }
    }
}
